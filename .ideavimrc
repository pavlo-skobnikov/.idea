" -> https://github.com/JetBrains/ideavim/wiki
""""" OPTIONS

" Use Vim as default handling for (almost) Vim shortcuts
sethandler a:vim
sethandler <C-y> a:ide

" Use Intellij's line joining behaviour
set ideajoin

" <SPC> as the leader key
let mapleader = " "

" Show Current Vim Mode
set showmode

" Use the Clipboard Register '*' for All Yank, Delete, Change and Put Operations
" (-> which would normally go to the unnamed register)
set clipboard+=unnamed

" Search as Characters are Entered
set incsearch

" Highlight Search Results
set hlsearch

" Case-sensitive Search Only on Present Upper Letters
set ignorecase
set smartcase

" Relative Numbers Only Club
set relativenumber

""""" PLUGINS & RELATED SETTINGS

"" PLUGIN
" Enable which-key extension
set which-key

" Disable which-key timeout, i.e. show the menu until you press a key
set notimeout

" Show the menu also for default Vim actions like `gg` or `zz`.
let g:WhichKey_ShowVimActions = "false"

"" PLUGIN
" Vim Movement in the Project View
" -> https://github.com/JetBrains/ideavim/wiki/NERDTree-support
set NERDTree

"" PLUGIN
" Emulate vim-surround. Commands: ys, cs, ds
" -> https://github.com/tpope/vim-surround/blob/master/doc/surround.txt
set surround

"" PLUGIN

" Add text object for arguments: aA (around arguments), iA (inside arguments)
set argtextobj

" MAPPINGS

" MISCELLANEOUS

" Increase/decrease selection
vnoremap ; :action EditorSelectWord<CR>
vnoremap , :action EditorUnSelectWord<CR>

" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remove highlights on <ESC>
nnoremap <esc> :noh<CR>

" Center screen on movement
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Replace multiple successive whitespaces with a single space
let g:WhichKeyDesc_TrimWhitespaceDelete = "d<space> Trim whitespace"
nnoremap d<space> f<space>diwi<space><esc>

let g:WhichKeyDesc_TrimWhitespaceChange = "c<space> Trim whitespace"
nnoremap c<space> f<space>diwi<space>

" Deleting and pasting without replacing the unnamed register
let g:WhichKeyDesc_DeleteWithoutCopy = "<leader>d Delete without copying"
vnoremap <leader>d "_d

let g:WhichKeyDesc_PasteWithoutCopy = "<leader>p Paste without copying"
nnoremap <leader>p "_dP

" Explorer
nnoremap - :action SelectInProjectView<CR>

" COMMENT
let g:WhichKeyDesc_CommentByBlockComment = "gb Comment by Block Comment"
nnoremap gb :action CommentByBlockComment<CR>
vnoremap gb :action CommentByBlockComment<CR>

let g:WhichKeyDesc_CommentByLineComment = "gc Comment by Line Comment"
nnoremap gc :action CommentByLineComment<CR>
vnoremap gc :action CommentByLineComment<CR>

" [] CODE NAVIGATION
let g:WhichKeyDesc_MethodUp = "[f Previous Function"
nnoremap [f :action MethodUp<CR>

let g:WhichKeyDesc_MethodDown = "]f Next Function"
nnoremap ]f :action MethodDown<CR>

" <leader> MISCELLANEOUS
let g:WhichKeyDesc_ReformatCode = "<leader>= Reformat Code"
nnoremap <leader>= :action ReformatCode<CR>
vnoremap <leader>= :action ReformatCode<CR>

let g:WhichKeyDesc_HideAllWindows - "<leader>- Hide All Tool Windows"
nnoremap <leader>- :action HideAllWindows<CR>

" LSP

" Get Minimal Parameter Info
nnoremap <C-S-k> :action ParameterInfo<CR>
inoremap <C-S-k> :action ParameterInfo<CR>

" Next/Previous Diagnostic
let g:WhichKeyDesc_GotoNextError = "]d Next diagnostic"
nnoremap ]d :action GotoNextError<CR>

let g:WhichKeyDesc_GotoPreviousError = "[d Previous diagnostic"
nnoremap [d :action GotoPreviousError<CR>

" Go to LSP capability actions
let g:WhichKeyDesc_GotoLspActions = "gl +lsp"

let g:WhichKeyDesc_GotoTypeDeclaration = "glt Go to type definition"
nnoremap glt :action GotoTypeDeclaration<CR>

let g:WhichKeyDesc_GotoClass = "glc Go to Class"
nnoremap glc :action GotoClass<CR>

let g:WhichKeyDesc_GotoSuperMethod = "gls Go to super"
nnoremap gls :action GotoSuperMethod<CR>

let g:WhichKeyDesc_GotoImplementation = "gli Go to implementation"
nnoremap gli :action GotoImplementation<CR>

let g:WhichKeyDesc_GotoTest = "glS Go to test suite"
nnoremap glS :action GotoTest<CR>

let g:WhichKeyDesc_CallHierarchy = "glC Call hierarchy"
nnoremap glC :action CallHierarchy<CR>

let g:WhichKeyDesc_TypeHierarchy = "glT Type hierarchy"
nnoremap glT :action TypeHierarchy<CR>

" Refactor LSP capability actions
let g:WhichKeyDesc_ShowIntentionActions = "<leader>ra Code actions"
nnoremap <leader>ra :action ShowIntentionActions<CR>

let g:WhichKeyDesc_Refactorings_QuickListPopupAction = "<leader>rl Code lens"
nnoremap <leader>rl :action Refactorings.QuickListPopupAction<CR>

let g:WhichKeyDesc_RenameElement = "<leader>rn Rename"
nnoremap <leader>rn :action RenameElement<CR>

let g:WhichKeyDesc_HighlightUsagesInFile = "<leader>rh Highlight symbol"
nnoremap <leader>rh :action HighlightUsagesInFile<CR>

let g:WhichKeyDesc_ShowErrorDescription = "<leader>rf Open float"
nnoremap <leader>rf :action ShowErrorDescription<CR>

let g:WhichKeyDesc_FindUsages = "<leader>rr Search references"
nnoremap <leader>rr :action FindUsages<CR>

let g:WhichKeyDesc_FileStructurePopup = "<leader>rd Search document symbols"
nnoremap <leader>rd :action FileStructurePopup<CR>

let g:WhichKeyDesc_GotoSymbol = "<leader>rw Search workspace symbols"
nnoremap <leader>rw :action GotoSymbol<CR>

let g:WhichKeyDesc_Generate = "<leader>rg Generate"
nnoremap <leader>rg :action Generate<CR>

let g:WhichKeyDesc_OptimizeImports = "<leader>ro Organize imports"
nnoremap <leader>ro :action OptimizeImports<CR>

"" COPILOT
let g:WhichKeyDesc_CopilotChatShow = "<leader>c Show Copilot chat"
nnoremap <leader>c :action copilot.chat.show<CR>

"" Debug
let g:WhichKeyDesc_Debug = "<leader>d +debug"

let g:WhichKeyDesc_ActivateDebugToolWindow = "<leader>dd DAP UI"
nnoremap <leader>dd :action ActivateDebugToolWindow<CR>

let g:WhichKeyDesc_KotlinConsoleREPL = "<leader>do Open REPL"
nnoremap <leader>do :action KotlinConsoleREPL<CR>

" Debug Run/Continue mappings
let g:WhichKeyDesc_RunMappings = "<leader>dr +run"

let g:WhichKeyDesc_Continue = "<leader>drc Continue"
nnoremap <leader>drc :action Debug<CR>

" Debug Step mappings
let g:WhichKeyDesc_DebugStepMappings = "<leader>ds +step"

let g:WhichKeyDesc_RunToCursor = "<leader>dsn Run to cursor"
nnoremap <leader>dsc :action RunToCursor<CR>

let g:WhichKeyDesc_StepOver = "<leader>dsn Step next"
nnoremap <leader>dsn :action StepOver<CR>

let g:WhichKeyDesc_StepInto = "<leader>dsi Step into"
nnoremap <leader>dsi :action StepInto<CR>

let g:WhichKeyDesc_StepOut = "<leader>dso Step out"
nnoremap <leader>dso :action StepOut<CR>

" Debug Breakpoint mappings
let g:WhichKeyDesc_DebugBreakpointMappings = "<leader>db +breakpoint"

let g:WhichKeyDesc_AddBreakpoint = "<leader>dbb Toggle breakpoint"
nnoremap <leader>dbb :action AddBreakpoint<CR>

let g:WhichKeyDesc_RemoveAllBreakpointsInFile = "<leader>dbr Remove all breakpoints in file"
nnoremap <leader>dbr :action Debugger.RemoveAllBreakpointsInFile<CR>

let g:WhichKeyDesc_AddConditionalBreakpoint = "<leader>dbc Toggle conditional breakpoint"
nnoremap <leader>dbc :action AddConditionalBreakpoint<CR>

" Debug Find mappings
let g:WhichKeyDesc_DebugFind = "<leader>df +find"

let g:WhichKeyDesc_ViewBreakpoints = "<leader>dfb Breakpoints"
nnoremap <leader>dfb :action ViewBreakpoints<CR>

" Find
let g:WhichKeyDesc_Find = "<leader>f +find"

let g:WhichKeyDesc_GotoFile = "<leader>ff All files"
nnoremap <leader>ff :action GotoFile<CR>

let g:WhichKeyDesc_RecentFiles = "<leader>fF Recent files"
nnoremap <leader>fF :action RecentFiles<CR>

let g:WhichKeyDesc_FindInPath = "<leader>fg grep"
nnoremap <leader>fg :action FindInPath<CR>

let g:WhichKeyDesc_GotoAction = "<leader>fc Command && run"
nnoremap <leader>fc :action GotoAction<CR>

" Git
let g:WhichKeyDesc_Git = "<leader>g +git"

let g:WhichKeyDesc_Vcs_QuickListPopupAction = "<leader>ga Actions"
nnoremap <leader>ga :action Vcs.QuickListPopupAction<CR>

let g:WhichKeyDesc_Git_Branches = "<leader>gb Branches"
nnoremap <leader>gb :action Git.Branches<CR>

let g:WhichKeyDesc_Vcs_Show_Local_Changes = "<leader>gg Changes"
nnoremap <leader>gg :action Vcs.Show.Local.Changes<CR>

let g:WhichKeyDesc_Vcs_Show_Log = "<leader>gl Log"
nnoremap <leader>gl :action Vcs.Show.Log<CR>

let g:WhichKeyDesc_Vcs_ShowTabbedFileHistory = "<leader>gh File history"
nnoremap <leader>gh :action Vcs.ShowTabbedFileHistory<CR>

let g:WhichKeyDesc_Vcs_Show_Shelf = "<leader>gs Stash"
nnoremap <leader>gs :action Vcs.Show.Shelf<CR>

let g:WhichKeyDesc_Vcs_Push = "<leader>gp Push"
nnoremap <leader>gp :action Vcs.Push<cr>

let g:WhichKeyDesc_Vcs_UpdateProject = "<leader>gu Pull"
nnoremap <leader>gu :action Vcs.UpdateProject<CR>

" Hunks
let g:WhichKeyDesc_RightSquareBracket_VcsShowNextChangeMarker = "]c Next change"
nnoremap ]c :action VcsShowNextChangeMarker<CR>

let g:WhichKeyDesc_LeftSquareBracket_VcsShowPrevChangeMarker = "[c Previous change"
nnoremap [c :action VcsShowPrevChangeMarker<CR>

let g:WhichKeyDesc_Hunks = "<leader>h +hunks"

let g:WhichKeyDesc_Hunks_RollbackChangedLines = "<leader>hh Reset hunk"
nnoremap <leader>hh :action Vcs.RollbackChangedLines<CR>
vnoremap <leader>hh :action Vcs.RollbackChangedLines<CR>

" Configure
let g:WhichKeyDesc_Help = "<leader>C +configure"

let g:WhichKeyDesc_Help_InspectionSettings = "<leader>Ci Open inspection settings"
nnoremap <leader>Ci :action PopupHector<CR>

let g:WhichKeyDesc_WelcomeScreen_DevelopPlugins = "<leader>Cp JetBrains plugins repository"
nnoremap <leader>Cp :action WelcomeScreen.DevelopPlugins<CR>

let g:WhichKeyDesc_ReloadIdeaVimRc = "<leader>Cr Reload .ideavimrc"
nnoremap <leader>Cr :source ~/.ideavimrc<CR>

" Workspaces
let g:WhichKeyDesc_Workspaces = "<leader>w +workspaces"

let g:WhichKeyDesc_NextProjectWindow = "<leader>wn Focus next project"
nnoremap <leader>wn :action NextProjectWindow<CR>

let g:WhichKeyDesc_PreviousProjectWindow = "<leader>wp Focus previous project"
nnoremap <leader>wp :action PreviousProjectWindow<CR>

let g:WhichKeyDesc_InvalidateCaches = "<leader>wi Invalidate cache"
nnoremap <leader>wi :action InvalidateCaches<CR>

let g:WhichKeyDesc_ManageRecentProjects = "<leader>wr Recent projects"
nnoremap <leader>wr :action ManageRecentProjects<CR>

let g:WhichKeyDesc_NewProject = "<leader>wA Create new project"
nnoremap <leader>wA :action NewProject<CR>

let g:WhichKeyDesc_ImportProject = "<leader>wI Import project from existing files"
nnoremap <leader>wI :action ImportProject<CR>

let g:WhichKeyDesc_ProjectFromVersionControl = "<leader>wG New project from VCS"
nnoremap <leader>wG :action ProjectFromVersionControl<CR>

let g:WhichKeyDesc_CloseOtherProjects = "<leader>wO Close all other projects"
nnoremap <leader>wO :action CloseOtherProjects<CR>

let g:WhichKeyDesc_CloseProject = "<leader>wq Close this project"
nnoremap <leader>wq :action CloseProject<CR>

let g:WhichKeyDesc_CloseAllProjects = "<leader>wQ Close all projects"
nnoremap <leader>wQ :action CloseAllProjects<CR>

let g:WhichKeyDesc_Exit = "<leader>wE Exit"
nnoremap <leader>wE :action Exit<CR>

let g:WhichKeyDesc_RestartIde = "<leader>wR Restart"
nnoremap <leader>wR :action RestartIde<CR>

" Toggles
let g:WhichKeyDesc_Toggle = "yo +toggle"

let g:WhichKeyDesc_EnableCopilot = "yoc Enable Copilot"
nnoremap yoc :action copilot.enableCopilot<CR>

let g:WhichKeyDesc_DisableCopilot = "yoC Disable Copilot"
nnoremap yoC :action copilot.disableCopilot<CR>

let g:WhichKeyDesc_Annotate = "yog Toggle Blame"
nnoremap yog :action Annotate<CR>

let g:WhichKeyDesc_EditorToggleShowIndentLines = "yoi Toggle show indent guide"
nnoremap yoi :action EditorToggleShowIndentLines<CR>

let g:WhichKeyDesc_EditorToggleUseSoftWraps = "yow Toggle line wrapping"
nnoremap yow :action EditorToggleUseSoftWraps<CR>

let g:WhichKeyDesc_EditorToggleShowLineNumbers = "yon Toggle line numbers"
nnoremap yon :action EditorToggleShowLineNumbers<CR>

let g:WhichKeyDesc_Toggles_RelativeLineNumbers = "yor Toggle relative line numbers"
nnoremap yor :set relativenumber!<CR>

let g:WhichKeyDesc_EditorToggleShowWhitespaces = "yow Toggle show whitespaces"
nnoremap yow :action EditorToggleShowWhitespaces<CR>

let g:WhichKeyDesc_EditorToggleShowGutterIcons = "yoG Toggle gutter icons"
nnoremap yoG :action EditorToggleShowGutterIcons<CR>

let g:WhichKeyDesc_TogglePowerSave = "yop Toggle power save"
nnoremap yop :action TogglePowerSave<CR>

" Major (basically, Intellij-specific functionality)
let g:WhichKeyDesc_Major = "<leader>m +major"

let g:WhichKeyDesc_CodeCleanup = "<leader>mC Clean code up"
nnoremap <leader>mC :action CodeCleanup<CR>

let g:WhichKeyDesc_InspectCode = "<leader>mi Inspect Code"
nnoremap <leader>mi :action InspectCode<CR>

let g:WhichKeyDesc_NewElement = "<leader>mn Create a new element"
nnoremap <leader>mn :action NewElement<CR>

let g:WhichKeyDesc_ReplaceInPath = "<leader>mp Replace in project"
nnoremap <leader>mp :action ReplaceInPath<CR>

let g:WhichKeyDesc_RenameFile = "<leader>mR Rename file"
nnoremap <leader>mR :action RenameFile<CR>

" Running
let g:WhichKeyDesc_MajorRun = "<leader>mr +run"

let g:WhichKeyDesc_Run = "<leader>mrr Run Current Configuration"
nnoremap <leader>mrr :action Run<CR>

let g:WhichKeyDesc_RunAnything = "<leader>mra Run anything"
nnoremap <leader>mra :action RunAnything<CR>

let g:WhichKeyDesc_RunClass = "<leader>mrc Run under cursor"
nnoremap <leader>mrc :action RunClass<CR>

let g:WhichKeyDesc_Stop = "<leader>mrk Kill application"
nnoremap <leader>mrk :action Stop<CR>

let g:WhichKeyDesc_RerunTests = "<leader>mrt Re-run tests"
nnoremap <leader>mrt :action RerunTests<CR>

let g:WhichKeyDesc_ChooseRunConfiguration = "<leader>mrs Select configuration and run"
nnoremap <leader>mrs :action ChooseRunConfiguration<CR>

" Harpoon
let g:WhichKeyDesc_AddToHarpoon = "<leader>a Add to Harpoon"
nnoremap <leader>a :action AddToHarpoon<CR>

let g:WhichKeyDesc_ShowHarpoon = "<leader>l Show Harpoon"
nnoremap <leader>l :action ShowHarpoon<CR>

let g:WhichKeyDesc_GotoHarpoon1 = "g1 Go to Harpoon 1"
nnoremap g1 :action GotoHarpoon1<CR>

let g:WhichKeyDesc_GotoHarpoon2 = "g2 Go to Harpoon 2"
nnoremap g2 :action GotoHarpoon2<CR>

let g:WhichKeyDesc_GotoHarpoon3 = "g3 Go to Harpoon 3"
nnoremap g3 :action GotoHarpoon3<CR>

let g:WhichKeyDesc_GotoHarpoon4 = "g4 Go to Harpoon 4"
nnoremap g4 :action GotoHarpoon4<CR>

let g:WhichKeyDesc_GotoHarpoon5 = "g5 Go to Harpoon 5"
nnoremap g5 :action GotoHarpoon5<CR>
