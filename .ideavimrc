" -> https://github.com/JetBrains/ideavim/wiki
""""" OPTIONS

" Use Vim as default handling for (almost) Vim shortcuts
sethandler a:vim
sethandler <C-y> a:ide

" Use Intellij's line joining behaviour
set ideajoin

" <SPC> as the leader key
let mapleader = " "

" Show Current Vim Mode
set showmode

" Use the Clipboard Register '*' for All Yank, Delete, Change and Put Operations
" (-> which would normally go to the unnamed register)
set clipboard+=unnamed

" Search as Characters are Entered
set incsearch

" Highlight Search Results
set hlsearch

" Case-sensitive Search Only on Present Upper Letters
set ignorecase
set smartcase

" Relative Numbers Only Club
set relativenumber

""""" PLUGINS & RELATED SETTINGS

"" PLUGIN
" Enable which-key extension
set which-key

" Disable which-key timeout, i.e. show the menu until you press a key
set notimeout

" Show the menu also for default Vim actions like `gg` or `zz`.
let g:WhichKey_ShowVimActions = "false"

"" PLUGIN
" Vim Movement in the Project View
" -> https://github.com/JetBrains/ideavim/wiki/NERDTree-support
set NERDTree

"" PLUGIN
" Emulate vim-surround. Commands: ys, cs, ds
" -> https://github.com/tpope/vim-surround/blob/master/doc/surround.txt
set surround

"" PLUGIN

" Add text object for arguments: aA (around arguments), iA (inside arguments)
set argtextobj

" MAPPINGS

" MISCELLANEOUS

" Increase/decrease selection
vnoremap ; :action EditorSelectWord<CR>
vnoremap , :action EditorUnSelectWord<CR>

" Easy window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remove highlights on <ESC>
nnoremap <esc> :noh<CR>

" Center screen on movement
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Replace multiple successive whitespaces with a single space
let g:WhichKeyDesc_TrimWhitespaceDelete = "d<space> Trim whitespace"
nnoremap d<space> f<space>diwi<space><esc>

let g:WhichKeyDesc_TrimWhitespaceChange = "c<space> Trim whitespace"
nnoremap c<space> f<space>diwi<space>

" Deleting and pasting without replacing the unnamed register
let g:WhichKeyDesc_DeleteWithoutCopy = "<leader>d Delete without copying"
vnoremap <leader>D "_d

let g:WhichKeyDesc_PasteWithoutCopy = "<leader>p Paste without copying"
nnoremap <leader>P "_dP

" Explorer
nnoremap - :action SelectInProjectView<CR>

" Comment
let g:WhichKeyDesc_CommentByBlockComment = "gb Comment by block comment"
nnoremap gb :action CommentByBlockComment<CR>
vnoremap gb :action CommentByBlockComment<CR>

let g:WhichKeyDesc_CommentByLineComment = "gc Comment by line comment"
nnoremap gc :action CommentByLineComment<CR>
vnoremap gc :action CommentByLineComment<CR>

"" [] NAVIGATION
let g:WhichKeyDesc_MethodUp = "[f Previous function"
nnoremap [f :action MethodUp<CR>

let g:WhichKeyDesc_MethodDown = "]f Next function"
nnoremap ]f :action MethodDown<CR>

let g:WhichKeyDesc_GotoNextError = "]d Next diagnostic"
nnoremap ]d :action GotoNextError<CR>

let g:WhichKeyDesc_GotoPreviousError = "[d Previous diagnostic"
nnoremap [d :action GotoPreviousError<CR>

let g:WhichKeyDesc_RightSquareBracket_VcsShowNextChangeMarker = "]c Next change"
nnoremap ]c :action VcsShowNextChangeMarker<CR>

let g:WhichKeyDesc_LeftSquareBracket_VcsShowPrevChangeMarker = "[c Previous change"
nnoremap [c :action VcsShowPrevChangeMarker<CR>

"" <leader> Actions
let g:WhichKeyDesc_ReformatCode = "<leader>= Reformat code"
nnoremap <leader>= :action ReformatCode<CR>
vnoremap <leader>= :action ReformatCode<CR>

let g:WhichKeyDesc_HideAllWindows = "<leader>- Hide All tool windows"
nnoremap <leader>- :action HideAllWindows<CR>

let g:WhichKeyDesc_AnalyzeActions = "<leader>A Analyze actions"
nnoremap <leader>A :action AnalyzeActions<CR>

let g:WhichKeyDesc_RunnerActions = "<leader>R Runner actions"
nnoremap <leader>R :action RunnerActions<CR>

let g:WhichKeyDesc_DebuggingActionsGroup = "<leader>d Debugging actions group"
nnoremap <leader>d :action DebuggingActionsGroup<CR>

let g:WhichKeyDesc_BreakpointActionsGroup = "<leader>D Breakpoint actions group"
nnoremap <leader>D :action BreakpointActionsGroup<CR>

"" LSP
" Get function parameter info
nnoremap <c-s> :action ParameterInfo<CR>
inoremap <c-s> :action ParameterInfo<CR>

" Go to LSP capability actions
let g:WhichKeyDesc_FindUsages = "gr References"
nnoremap gr :action FindUsages<CR>

let g:WhichKeyDesc_GotoLspActions = "gl +lsp"

let g:WhichKeyDesc_GotoTypeDeclaration = "glt Go to type definition"
nnoremap glt :action GotoTypeDeclaration<CR>

let g:WhichKeyDesc_GotoImplementation = "gli Go to implementation"
nnoremap gli :action GotoImplementation<CR>

let g:WhichKeyDesc_GotoSuperMethod = "gls Go to super"
nnoremap gls :action GotoSuperMethod<CR>

let g:WhichKeyDesc_FileStructurePopup = "gld Search document symbols"
nnoremap gld :action FileStructurePopup<CR>

let g:WhichKeyDesc_GotoSymbol = "glw Search workspace symbols"
nnoremap glw :action GotoSymbol<CR>

" Refactor-ish LSP capability actions
let g:WhichKeyDesc_Refactor = "cr +refactor"

let g:WhichKeyDesc_ShowIntentionActions = "crr Refactor actions"
nnoremap crr :action ShowIntentionActions<CR>

let g:WhichKeyDesc_Refactorings_QuickListPopupAction = "crl Code lens"
nnoremap crl :action Refactorings.QuickListPopupAction<CR>

let g:WhichKeyDesc_RenameElement = "crn Rename"
nnoremap crn :action RenameElement<CR>

let g:WhichKeyDesc_Generate = "crg Generate"
nnoremap crg :action Generate<CR>

let g:WhichKeyDesc_HighlightUsagesInFile = "crh Highlight symbol"
nnoremap crh :action HighlightUsagesInFile<CR>

let g:WhichKeyDesc_ShowErrorDescription = "crf Open float"
nnoremap crf :action ShowErrorDescription<CR>

let g:WhichKeyDesc_OptimizeImports = "cro Organize imports"
nnoremap cro :action OptimizeImports<CR>

"" Find/Search
let g:WhichKeyDesc_GotoFile = "<leader>f Find files"
nnoremap <leader>f :action GotoFile<CR>

let g:WhichKeyDesc_RecentFiles = "<leader>F Recent files"
nnoremap <leader>F :action RecentFiles<CR>

let g:WhichKeyDesc_FindInPath = "<leader>/ Search in files"
nnoremap <leader>/ :action FindInPath<CR>

"" Git
let g:WhichKeyDesc_ChangesView_ToggleCommitUi = "<leader>g Git changes"
nnoremap <leader>g :action ChangesView.ToggleCommitUi<CR>

let g:WhichKeyDesc_GitRepositoryActions = "<leader>G Git repository actions"
nnoremap <leader>G :action GitRepositoryActions<CR>

"" Harpoon
let g:WhichKeyDesc_AddToHarpoon = "<leader>a Add to Harpoon"
nnoremap <leader>a :action AddToHarpoon<CR>

let g:WhichKeyDesc_ShowHarpoon = "<leader>l Show Harpoon"
nnoremap <leader>l :action ShowHarpoon<CR>

let g:WhichKeyDesc_GotoHarpoon1 = "g1 Go to Harpoon 1"
nnoremap g1 :action GotoHarpoon1<CR>

let g:WhichKeyDesc_GotoHarpoon2 = "g2 Go to Harpoon 2"
nnoremap g2 :action GotoHarpoon2<CR>

let g:WhichKeyDesc_GotoHarpoon3 = "g3 Go to Harpoon 3"
nnoremap g3 :action GotoHarpoon3<CR>

let g:WhichKeyDesc_GotoHarpoon4 = "g4 Go to Harpoon 4"
nnoremap g4 :action GotoHarpoon4<CR>
